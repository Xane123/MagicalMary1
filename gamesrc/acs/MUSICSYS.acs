#library "xglobal"

#include "zcommon.acs"

global int 16:lives;
global int 20:level[];	//Level number; Don't set this if challenge[0] isn't 0. [0] is highest level reached and [1] is last level played. Use each in different situations.

int current_music[8];	//Current music playing for each player.
int requested_music[8];	//The song ID queued for each player, set by script 254.
int current_soundtrack[8];	//Each player's soundtrack selection. Used for instantly changing versions in real time.

bool forceUpdate = FALSE;	//Used for fading in new songs to make sure it doesn't become silent.
int musicinfo_tics;	//If this isn't 0, info won't be displayed!
//See LANGUAGE.ENU fo song info.
//NES soundtrack relies on NESMUSIC.nsf. IDs should match the song IDs inside it.

int stored_music_id = 1;	//Music ID stored before drowning music.

bool fadein;	//Whether to forcibly restart the requested song, even if it's the current song, used for script 255.

////////////////////
//MUSIC/SOUNDTRACK//
////////////////////

//To change songs, it's encouraged to use script 254 instead of SetMusic/LocalSetMusic. Script 254 passes its
//arguments to script 255, which selects the equivalent song in the soundtrack that player has selected.
//Additionally, the last song set usning this script is saved at checkpoints.

//arg1: Song ID
//arg2: Affect all players (TRUE) or only change the activator's song (FALSE)
//arg3: No fading (0) or fade out the current song then fade in the new one (1)
script 254 (int music_id, int all_players, int fade_in)
{
	if(current_music[PlayerNumber()]==music_id) forceUpdate = TRUE;
	
	if(fade_in == 0) fadein = FALSE;
	else if(fade_in == 1)
	{
		fadein = TRUE;
		ACS_NamedExecuteAlways("FadeMusic",0,1,FALSE,music_id);
		Delay(35);
	}
	else if(fade_in == 2) stored_music_id = current_soundtrack[PlayerNumber()];
	
	If(all_players==FALSE)
	{
		requested_music[PlayerNumber()] = music_id;
	}
	Else
	{
		for(int pn_254_temp; pn_254_temp <= PlayerCount()-1; pn_254_temp++)
		{
			requested_music[pn_254_temp] = music_id;
		}
	}
}

script 256 (void)	{	SetResultValue(current_music[PlayerNumber()]);	}

script 255 ENTER
{
While(1)
    {
	if(musicinfo_tics>0) musicinfo_tics--;
    If(requested_music[PlayerNumber()]!=current_music[PlayerNumber()]||forceUpdate)
        {
			if(requested_music[PlayerNumber()]==-1) requested_music[PlayerNumber()] = stored_music_id;	//If -1, instead restore their music.
			
			If(GetUserCVar(PlayerNumber(),"xane_soundtrack")==1)
			{
				If(requested_music[PlayerNumber()]>0&&lives>0) LocalSetMusic("NESMUSIC",requested_music[PlayerNumber()]-1);
				Else LocalSetMusic("");
			}
			Else
			{
				If(lives>0) LocalSetMusic(StrParam(l:StrParam(s:"MUSIC_FILE_", d:GetUserCVar(PlayerNumber(),"xane_soundtrack"), s:"_", d:requested_music[PlayerNumber()])),0,0);
				Else LocalSetMusic("");
			}
			
			/*Switch(GetUserCVar(PlayerNumber(),"xane_soundtrack"))
				{
				Case 0: 	//Normal
					If(lives>0) LocalSetMusic(music_0[requested_music[PlayerNumber()]],0,0);
				Break;
				Case 1: 	//NES
					If(requested_music[PlayerNumber()]>0&&lives>0) LocalSetMusic("NESMUSIC",requested_music[PlayerNumber()]-1);
					Else LocalSetMusic("");
				Break;
				Case 2:		//MIDI
					If(lives>0) LocalSetMusic(music_1[requested_music[PlayerNumber()]],0,0);
				Break;
				Default:
					//SetUserCVar(PlayerNumber(),"xane_soundtrack",0);
				Break;
				}*/
			
			current_music[PlayerNumber()] = requested_music[PlayerNumber()];
			if(fadein==TRUE&&lives>0) ACS_NamedExecuteAlways("FadeMusic",0,0,TRUE,0);	//Fade in the requested song.
			fadein = FALSE;
			forceUpdate = FALSE;
			
			If(GetUserCVAR(PlayerNumber(),"xane_songinfo")&&GetLevelInfo(LEVELINFO_LEVELNUM)<200&&musicinfo_tics<=0)
			{
				SetFont("SMALLFNT");
				SetHUDSize(640,480,TRUE);
				If(current_music[PlayerNumber()]>0)
				{
					HudMessage(l:StrParam(s:"MUSIC_TITLE_", d:current_music[PlayerNumber()]), s:"\n", l:StrParam(s:"MUSIC_ARTIST_", d:current_music[PlayerNumber()]);
						HUDMSG_TYPEON, 1, CR_YELLOW, 320.0, 24.1, 3.0, 0.025, 1.0, 1.0);
					HudMessage(s: "\c[LightBlue]Now playing \c[Yellow]", l:StrParam(s:"MUSIC_TITLE_", d:current_music[PlayerNumber()]), s:"\c[LightBlue] by \c[Yellow]", l:StrParam(s:"MUSIC_ARTIST_", d:current_music[PlayerNumber()]), s:"\c[LightBlue].";
						HUDMSG_PLAIN|HUDMSG_LOG, 0, CR_UNTRANSLATED, 768.0, 480.1, 0.1);
				}
				Else
				{
					HudMessage(s: "\c[LightBlue]Now playing \c[Yellow]no music\c[LightBlue].";
						HUDMSG_PLAIN|HUDMSG_LOG, 0, CR_UNTRANSLATED, 768.0, 480.1, 0.1);
				}
			}
			musicinfo_tics = 2;
		}
		
    Delay(5);
    If(current_soundtrack[PlayerNumber()]!=GetUserCVAR(PlayerNumber(),"xane_soundtrack"))
        {
			If(GetUserCVar(PlayerNumber(),"xane_soundtrack")==1)
			{
				If(requested_music[PlayerNumber()]>0&&lives>0) LocalSetMusic("NESMUSIC",requested_music[PlayerNumber()]-1);
				Else LocalSetMusic("");
			}
			Else
			{
				If(lives>0) LocalSetMusic(StrParam(l:StrParam(s:"MUSIC_FILE_", d:GetUserCVar(PlayerNumber(),"xane_soundtrack"), s:"_", d:requested_music[PlayerNumber()])),0,0);
				Else LocalSetMusic("");
			}
        /*Switch(GetUserCVar(PlayerNumber(),"xane_soundtrack"))
            {
            Case 0: 	//Normal
				If(lives>0) LocalSetMusic(music_0[requested_music[PlayerNumber()]],0,0);
			Break;
			Case 1: 	//NES
			Break;
			Case 2:		//MIDI
				If(lives>0) LocalSetMusic(music_1[requested_music[PlayerNumber()]],0,0);
			Break;
			Default:
				//SetUserCVar(PlayerNumber(),"xane_soundtrack",0);
            Break;
			}*/
        current_soundtrack[PlayerNumber()] = GetUserCVAR(PlayerNumber(),"xane_soundtrack");
        current_music[PlayerNumber()] = requested_music[PlayerNumber()];
        }

    Delay(5);
    }
}

/*script "FadeMusic" (int speed, int fade_in_music, int id)	//arg3, id, is for forcing a music update if necessary.
{	//Fading doesn't happen anymore and I'm too lazy to look, so this is now a way to force music to restart instead of ignoring the change.
	
	If(fade_in_music==FALSE)
	{
		
		Delay(1);
		
		if(current_music[PlayerNumber()]==id)
		{
			LocalSetMusic("");
			Delay(1);
			forceUpdate = TRUE;
		}
	}
	Else
	{
		Delay(1);
		
		fadein = FALSE;
	}
}*/

script "FadeMusic" (int speed, int fade_in_music, int id)	//arg3, id, is for forcing a music update if necessary.
{
	int volume;
	
	If(fade_in_music==FALSE)
	{
		if(GetCVAR("snd_musicvolume")>0) volume = 0.99;
		else volume = 0.01;	//If music volume is 0, it causes lag for unknown reasons. Let's make that only happen once.
		
		While(volume > 0)
		{
			if(speed<=0) volume -= 0.03;
			if(speed>0) volume -= 0.02;
			SetMusicVolume(volume);
			Delay(1);
		}
		
		if(current_music[PlayerNumber()]==id)
		{
			LocalSetMusic("");
			Delay(1);
			forceUpdate = TRUE;
		}
	}
	Else
	{
		if(GetCVAR("snd_musicvolume")>0) volume = 0.01;
		else volume = 0.99;	//If music volume is 0, it causes lag for unknown reasons. Let's make that only happen once.
		
		
		While(volume < 1.0)
		{
			volume += 0.02;
			SetMusicVolume(volume);
			Delay(1);
		}
		
		fadein = FALSE;
	}
}