///////////////////////////
//SPECIAL STAGES (Ported)//
///////////////////////////
#library "xglobal"

#include "zcommon.acs"

world bool 9:level_ready;	//This prevents certain scripts from working until it's set to TRUE by SeamlessHelper.

global int 3:cgem_count;	//Chaos Bridges count
global bool 23:dying[];		//If a player is dying this is TRUE.

//These arrays configure the Special Stages for the base time limit and coin amount. Keep in mind factors alter them.
int coins_required[7] = { 225, 300, 350, 325, -1, -1, -1 };	//Coins required to complete the stages.
int minutes_required[7] = { 9, 12, 12, 12, 12, 12, 12 };	//How many 15 second intervals are on the clock.
int scoresp;	//Time bonus for special stages.
bool time_stop = FALSE;	//Sends the signal to SSTimer to stop.
bool failed = FALSE;	//Whether the player failed this special stage.

world int 1:secsp;	//Seconds on special stage timer; Modulo/division is used to keep track of minutes.
world int 2:ss_number;	//What number this Special Stage is. Try to replace with LEVELINFO_SPECSTGNO.
world int 5:ss_returnlevel;	//What level to return to on request by certain scripts.

global bool 22:no_scripts[];	//Tells most standard scripts like Air Dashes not to run.

int ss_colors[18];
int last_amounts[8];
int floorheights[8];
int xpos = 1.0;

#define C_TID		1050	//Default camera tid
#define MAX_R		80	//Maximum radius (or distance from the player)
#define ADJUST_R	8	//Amount to adjust the camera by
#define VIEW_HEIGHT	41.0	//The approximate height of the player's view

		int a[8];
		int p = 0;
		int mmx[8];
		int y[8];
		int z[8];
          int r = MAX_R;
		int xyr;

script "Time" (int sec) { secsp = sec; }

bool end = false;

script "CheckStatus" ENTER 
{
int total_time = 0;
If(ACS_NamedExecuteWithResult("CheckSpecialStage",0,0,0,0)==FALSE) Terminate;
If(cgem_count>=7&&GetCVAR("xane_debug")==FALSE) { Teleport_NewMap(ss_returnlevel,0); }	//Return the player to the level they left; They keep the monsters/items/secrets percentages when they return. Terminate; }	//Force the player out if they have all of th Chaos Bridges.
//Also, if they aren't on the correct Special Stage, force them to there unless a demo is involed.
If(cgem_count!=ACS_NamedExecuteWithResult("CheckSpecialStage",TRUE,0,0,0)&&GetCVAR("cl_demo")==FALSE&&GetCVAR("xane_debug")==FALSE) { ChangeLevel(StrParam(s:"SPECSTG", d:cgem_count+1),0,CHANGELEVEL_NOINTERMISSION|CHANGELEVEL_PRERAISEWEAPON, GameSkill());/*ACS_NamedExecute("ExitSpecialStage",0,0,0,0);*/ Terminate; }
Delay(1);
Until(level_ready==TRUE) Delay(1);	//Wait for SeamlessHelper before displaying the level title card.
TakeActorInventory(1000 + PlayerNumber(),"CoinSP",999);
While(CheckActorInventory(1000,"CoinSP")+CheckActorInventory(1001,"CoinSP")+CheckActorInventory(1002,"CoinSP")+CheckActorInventory(1003,"CoinSP")+CheckActorInventory(1004,"CoinSP")+CheckActorInventory(1005,"CoinSP")+CheckActorInventory(1006,"CoinSP")+CheckActorInventory(1007,"CoinSP")<coins_required[ACS_NamedExecuteWithResult("CheckSpecialStage",TRUE,0,0,0)]&&end==false)
    {
	total_time++;	//Increase timer then check conditions for Sonic 2-esque warning.
	If((coins_required[ACS_NamedExecuteWithResult("CheckSpecialStage",TRUE,0,0,0)]-CheckActorInventory(1000,"CoinSP")+CheckActorInventory(1001,"CoinSP")+CheckActorInventory(1002,"CoinSP")+CheckActorInventory(1003,"CoinSP")+CheckActorInventory(1004,"CoinSP")+CheckActorInventory(1005,"CoinSP")+CheckActorInventory(1006,"CoinSP")+CheckActorInventory(1007,"CoinSP") <= 10 && coins_required[ACS_NamedExecuteWithResult("CheckSpecialStage",TRUE,0,0,0)]-CheckActorInventory(1000,"CoinSP")+CheckActorInventory(1001,"CoinSP")+CheckActorInventory(1002,"CoinSP")+CheckActorInventory(1003,"CoinSP")+CheckActorInventory(1004,"CoinSP")+CheckActorInventory(1005,"CoinSP")+CheckActorInventory(1006,"CoinSP")+CheckActorInventory(1007,"CoinSP") > 1 || secsp <= 10 && coins_required[ACS_NamedExecuteWithResult("CheckSpecialStage",TRUE,0,0,0)]-CheckActorInventory(1000,"CoinSP")+CheckActorInventory(1001,"CoinSP")+CheckActorInventory(1002,"CoinSP")+CheckActorInventory(1003,"CoinSP")+CheckActorInventory(1004,"CoinSP")+CheckActorInventory(1005,"CoinSP")+CheckActorInventory(1006,"CoinSP")+CheckActorInventory(1007,"CoinSP") <= 50) && total_time % 1 == 0) HUDMessage(d:coins_required[ACS_NamedExecuteWithResult("CheckSpecialStage",TRUE,0,0,0)]-CheckActorInventory(1000,"CoinSP")+CheckActorInventory(1001,"CoinSP")+CheckActorInventory(1002,"CoinSP")+CheckActorInventory(1003,"CoinSP")+CheckActorInventory(1004,"CoinSP")+CheckActorInventory(1005,"CoinSP")+CheckActorInventory(1006,"CoinSP")+CheckActorInventory(1007,"CoinSP"), s:" MORE COINS!";
		HUDMSG_FADEOUT, 10, CR_WHITE/*ss_colors[Random(0,22)]*/, 0.5, 0.45, 0.075, 0.20);   //Player number    if(failed==TRUE) GiveActorInventory(1000,"CoinSP",500);
	If((coins_required[ACS_NamedExecuteWithResult("CheckSpecialStage",TRUE,0,0,0)]-CheckActorInventory(1000,"CoinSP")+CheckActorInventory(1001,"CoinSP")+CheckActorInventory(1002,"CoinSP")+CheckActorInventory(1003,"CoinSP")+CheckActorInventory(1004,"CoinSP")+CheckActorInventory(1005,"CoinSP")+CheckActorInventory(1006,"CoinSP")+CheckActorInventory(1007,"CoinSP") == 1 || secsp <= 10 && coins_required[ACS_NamedExecuteWithResult("CheckSpecialStage",TRUE,0,0,0)]-CheckActorInventory(1000,"CoinSP")+CheckActorInventory(1001,"CoinSP")+CheckActorInventory(1002,"CoinSP")+CheckActorInventory(1003,"CoinSP")+CheckActorInventory(1004,"CoinSP")+CheckActorInventory(1005,"CoinSP")+CheckActorInventory(1006,"CoinSP")+CheckActorInventory(1007,"CoinSP") <= 50) && total_time % 1 == 0) HUDMessage(d:coins_required[ACS_NamedExecuteWithResult("CheckSpecialStage",TRUE,0,0,0)]-CheckActorInventory(1000,"CoinSP")+CheckActorInventory(1001,"CoinSP")+CheckActorInventory(1002,"CoinSP")+CheckActorInventory(1003,"CoinSP")+CheckActorInventory(1004,"CoinSP")+CheckActorInventory(1005,"CoinSP")+CheckActorInventory(1006,"CoinSP")+CheckActorInventory(1007,"CoinSP"), s:" MORE COIN!";
		HUDMSG_FADEOUT, 10, CR_WHITE/*ss_colors[Random(0,22)]*/, 0.5, 0.45, 0.075, 0.20);   //Player number    if(failed==TRUE) GiveActorInventory(1000,"CoinSP",500);
    if(failed==TRUE||end==TRUE) GiveActorInventory(1000,"CoinSP",500);
    if(failed==TRUE||end==TRUE) GiveActorInventory(1001,"CoinSP",500);
    if(failed==TRUE||end==TRUE) GiveActorInventory(1002,"CoinSP",500);
    if(failed==TRUE||end==TRUE) GiveActorInventory(1003,"CoinSP",500);
    if(failed==TRUE||end==TRUE) GiveActorInventory(1004,"CoinSP",500);
    if(failed==TRUE||end==TRUE) GiveActorInventory(1005,"CoinSP",500);
    if(failed==TRUE||end==TRUE) GiveActorInventory(1006,"CoinSP",500);
    if(failed==TRUE||end==TRUE) GiveActorInventory(1007,"CoinSP",500);
    Delay(7);
    }
	
	total_time = 0;

        for (int ib = 0; ib < 8; ib++) {    //Make every player enter this pose until everyone's on the ground, to avoid messing up the animations.
			end = TRUE;
			TakeActorInventory(1000+ib,"CoinSP",999);
            ACS_NamedExecuteAlways("PlayerMovement",0,1,0,0);
            SetActorState(1000+ib,"cgem_wait",0);
        }
        for (int ic = 0; ic<= PlayerCount()-1; ic++) {
            floorheights[ic] = 32;
        }
    Until(floorheights[0]==0&&floorheights[1]==0&&floorheights[2]==0&&floorheights[3]==0&&floorheights[4]==0&&floorheights[5]==0&&floorheights[6]==0&&floorheights[7]==0)
        {
        Delay(1);
        
            for (int id = 0; id <= PlayerCount()-1; id++) { //Update floor height variables.
                floorheights[id] = GetActorZ(1000+id) - GetActorFloorZ(1000+id);
            }
        }
    
    if(failed==FALSE)
    {
        ACS_Execute(254,0,5,TRUE,0);    //Start the jingle.
        PlaySound(1050+PlayerNumber(),"mary/cgem_get",CHAN_5,1.0,FALSE,ATTN_NONE);

        for (int ig = 0; ig <= PlayerCount()-1; ig++) {
                SetActorVelocity(1000+ig,0,0,0,0,1);    //Stop each player.
                }
        for(int ih = 0; ih <= PlayerCount()-1; ih++) {  //Set up the third-person camera (modified from ZDoom wiki code)
                SetActorAngle(1000+ih,GetActorAngle(1000+ih)-0.5);
                a[ih] =  GetActorAngle (1000+ih);
            mmx[ih] = GetActorX (1000+ih);
            y[ih] = GetActorY (1000+ih);
            z[ih] = GetActorZ (1000+ih) + VIEW_HEIGHT;
            xyr =  r * cos (p) >> 16;
        SpawnForced("ChaseCam",mmx[ih]-cos(a[ih])*xyr, y[ih]-sin(a[ih])*xyr, z[ih], C_TID+ih, a[ih] >> 8);
            }
            ACS_ExecuteAlways(999,0,1000 + PlayerNumber(),0,0);     //Force cameras on and make the players talk.
        
        Delay(1);
        for (int ie = 0; ie <= PlayerCount()-1; ie++) {
                SetActorAngle(1000+ie,GetActorAngle(1000+ie)+0.5);
                SetActorState(1000+ie,"cgem",0);
				SetActorVelocity(1000+ie,0.0,0.0,GetActorVelZ(1000+ie),FALSE,FALSE);
				int cgemTID = UniqueTID();
                SpawnForced(StrParam(s:"CGem", d:ss_number),GetActorX(1000+ie),GetActorY(1000+ie),GetActorZ(1000+ie),cgemTID,GetActorAngle(1000+ie));
                ACS_NamedExecuteAlways("ShowEnding",0,0,0,0); 
        }

        Delay(35*4);
    }
    Else
    {
        ACS_Execute(254,0,3,TRUE,0);	//Play the "failure" jingle.
        PlaySound(1000+PlayerNumber(),"mary/cgem_fail",CHAN_VOICE,1.0,FALSE,ATTN_NONE);
        ACS_NamedExecuteAlways("ShowEnding",0,1,0,0);
    }
}

Script "IncreaseSSTimer" (int seconds)
{
	secsp += seconds;
}

Script "SpecialStageColorRandomizer" ENTER
{
If(ACS_NamedExecuteWithResult("CheckSpecialStage",0,0,0,0)==FALSE) Terminate;
for (int i = 0; i <= 18; i++) {
    ss_colors[i] = Random(0,22);
}

for (int ia = 0; ia <= 16; ia++) {
if(ia==1||ia==3||ia==5||ia==7||ia==9||ia==11||ia==13||ia==15) ia++;     //If the variable being checked is odd (a coin counter), look at the next array index.
    if(ss_colors[ia]==ss_colors[0])
    {
    Delay(1);
    if(ia!=0)
        {
        ss_colors[ia] = Random(0,22);
        ia = 2;
        }
    }
    if(ss_colors[ia]==ss_colors[2])
    {
    Delay(1);
    if(ia!=2)
        {
        ss_colors[ia] = Random(0,22);
        ia = 0;
        }
    }    
    if(ss_colors[ia]==ss_colors[4])
    {
    Delay(1);
    if(ia!=4)
        {
        ss_colors[ia] = Random(0,22);
        ia = 0;
        }
    }
    if(ss_colors[ia]==ss_colors[6])
    {
    Delay(1);
    if(ia!=6)
        {
        ss_colors[ia] = Random(0,22);
        ia = 0;
        }
    }
    if(ss_colors[ia]==ss_colors[8])
    {
    Delay(1);
    if(ia!=8)
        {
        ss_colors[ia] = Random(0,22);
        ia = 0;
        }
    }
    if(ss_colors[ia]==ss_colors[10])
    {
    Delay(1);
    if(ia!=10)
        {
        ss_colors[ia] = Random(0,22);
        ia = 0;
        }
    }
    if(ss_colors[ia]==ss_colors[12])
    {
    Delay(1);
    if(ia!=12)
        {
        ss_colors[ia] = Random(0,22);
        ia = 0;
        }
    }
    if(ss_colors[ia]==ss_colors[14])
    {
    Delay(1);
    if(ia!=14)
        {
        ss_colors[ia] = Random(0,22);
        ia = 0;
        }
    }
 Delay(1);
}

While(1)
    {
    for (int za = 0; za <= 7; za++) {
        If(last_amounts[za] != CheckActorInventory(1000+za,"CoinSP"))
        {
            last_amounts[za] = CheckActorInventory(1000+za,"CoinSP");
            ss_colors[za*2+1] = Random(0,22);
            ss_colors[17] = Random(0,22);
         Delay(1);
        }
    }
    Delay(1);
    }
}


script "GetCoinsRequired" (void) { SetResultValue(coins_required[ACS_NamedExecuteWithResult("CheckSpecialStage",TRUE,0,0,0)]); }

script "SpecialStagePrep" ENTER
{
	If(ACS_NamedExecuteWithResult("CheckSpecialStage",0,0,0,0)==FALSE) Terminate;
	//If(PlayerCount()>1) GiveActorInventory(1000 + PlayerNumber(),"SpecialStageHUDMod",1);     //If there's more than one player, modify the HUD to make room for the coin counters.

	If(PlayerNumber()==0)
	{
		If(coins_required[ACS_NamedExecuteWithResult("CheckSpecialStage",TRUE,0,0,0)]>-1)
		{
			If(GetCVAR("z_playertest")>7) SetCVAR("z_playertest", 7);
			
			Switch(GameSkill())	//Change requirements based on the difficulty.
			{
				Case 0:	//Easy difficulty
					minutes_required[ACS_NamedExecuteWithResult("CheckSpecialStage",TRUE,0,0,0)] += 2;	//Give an extra 30 seconds of time.
					coins_required[ACS_NamedExecuteWithResult("CheckSpecialStage",TRUE,0,0,0)] -= 50;
				Break;
				Case 2:	//Hard difficulty
					minutes_required[ACS_NamedExecuteWithResult("CheckSpecialStage",TRUE,0,0,0)] -= 2;	//Take away 30 seconds of time.
					coins_required[ACS_NamedExecuteWithResult("CheckSpecialStage",TRUE,0,0,0)] += 50;
				Break;
			}
			
			bool xane_present = FALSE;	//This variable will be set if any player is Xane.
			For(int ixp = 0; ixp < PlayerCount()+1; ixp++) if(PlayerClass(ixp)==1) xane_present = TRUE;
			
			If(xane_present)
			{
				minutes_required[ACS_NamedExecuteWithResult("CheckSpecialStage",TRUE,0,0,0)] += 1;	//Add 45 seconds to the timer.
				//coins_required[ACS_NamedExecuteWithResult("CheckSpecialStage",TRUE,0,0,0)] -= 20;	//Decrease the coin requirement by 25 coins.
			}
			
			/*Delay(10);	//Wait to see if any coin circles spawn.
			
			If(coins_required[ACS_NamedExecuteWithResult("CheckSpecialStage",TRUE,0,0,0)]>ThingCount(1, 0))	
				coins_required[ACS_NamedExecuteWithResult("CheckSpecialStage",TRUE,0,0,0)] = ThingCount(1, 0);
				
			If(coins_required[ACS_NamedExecuteWithResult("CheckSpecialStage",TRUE,0,0,0)]==-1) coins_required[ACS_NamedExecuteWithResult("CheckSpecialStage",TRUE,0,0,0)] = 999;
				
			PrintBold(d:coins_required[ACS_NamedExecuteWithResult("CheckSpecialStage",TRUE,0,0,0)], s:"\n", d:ThingCount(1, 0)-(ThingCount(1, 0)/16), s:"\n", d:ThingCount(1, 0));*/
		}
		Else
		{
			coins_required[ACS_NamedExecuteWithResult("CheckSpecialStage",TRUE,0,0,0)] = 999;
		}
	}
Until(level_ready==TRUE) Delay(1);	//Wait for the signal first.
ACS_NamedExecute("TimerSS",0,minutes_required[ACS_NamedExecuteWithResult("CheckSpecialStage",TRUE,0,0,0)],0,0);
}

script "DisplayCoinAmounts" OPEN
{
If(GetCVAR("cl_demo")==TRUE) Terminate;
If(ACS_NamedExecuteWithResult("CheckSpecialStage",0,0,0,0)==FALSE||GameType()==GAME_NET_DEATHMATCH) Terminate;
Delay(1);

int x, pad, spacing,x_spacing,rm,offset, x_color;

SetFont("SPECSTGF");
for (int ms_intro = 0.5; ms_intro > 0.01; ms_intro -= 0.075)
{
	HUDMessage (s:"SPECIAL STAGE";
		HUDMSG_FADEOUT, 0, CR_UNTRANSLATED, ms_intro,0.5, 0.001, 0.001, 0.001);   //Player number
	
	no_scripts[0] = TRUE;
	no_scripts[1] = TRUE;
	no_scripts[2] = TRUE;
	no_scripts[3] = TRUE;
	no_scripts[4] = TRUE;
	no_scripts[5] = TRUE;
	no_scripts[6] = TRUE;
	no_scripts[7] = TRUE;

	Delay(1);
}

no_scripts[0] = FALSE;
no_scripts[1] = FALSE;
no_scripts[2] = FALSE;
no_scripts[3] = FALSE;
no_scripts[4] = FALSE;
no_scripts[5] = FALSE;
no_scripts[6] = FALSE;
no_scripts[7] = FALSE;

dying[PlayerNumber()] = FALSE;
SetFont("BIG_TEXT");

Until(level_ready==TRUE) Delay(1);	//Wait for the signal first.

While(1)
{
Delay(1);

If(PlayerCount()<=1||GetCVAR("screenblocks")==13||no_scripts[0]==TRUE)
{
Delay(1);
}
Else
{
    x = 0;
    x_spacing = 0.2;
    spacing = 0.1;
    pad = 0.0034;
    rm = -0.01;
    offset = -0.02;

                SetFont("BIG_TEXT");
        for (int i = 0; i <= PlayerCount()-1; i++) {
            x = i;
            x_spacing = x+1;
            x_color = x * 2;
            HUDMessage (s:"P",d:x+1;
                HUDMSG_FADEOUT, 0, ss_colors[x_color], spacing*x_spacing+pad, pad, 0.01, 0.01, 0.01);   //Player number
            HUDMessage (d:CheckActorInventory(1000+x,"CoinSP");
                HUDMSG_FADEOUT, 0, ss_colors[x_color+1], spacing*x_spacing+pad-rm+offset, 0.0525+pad, 0.01, 0.01, 0.01);   //Coin count
                        rm = rm + 0.0005;

        If(i==PlayerCount()-1)
        {
            x++;
            x_spacing = x+1;
            offset += 0.05;
            rm = rm + 0.006;
            HUDMessage (l:"SS_COINTOTAL";
                HUDMSG_FADEOUT, 0, ss_colors[16], spacing*x_spacing+pad+offset, pad, 0.01, 0.01, 0.01);   //Player number
            HUDMessage (d:CheckActorInventory(1000,"CoinSP")+CheckActorInventory(1001,"CoinSP")+CheckActorInventory(1002,"CoinSP")+CheckActorInventory(1003,"CoinSP")+CheckActorInventory(1004,"CoinSP")+CheckActorInventory(1005,"CoinSP")+CheckActorInventory(1006,"CoinSP")+CheckActorInventory(1007,"CoinSP");
                HUDMSG_FADEOUT, 0, ss_colors[17], spacing*x_spacing+pad-rm+offset, 0.0525+pad, 0.01, 0.01, 0.01);   //Coin count
        }

        }
        }
        }
}

bool clock_appeared = FALSE;

script "TimerSS" (int min)
{
Delay(35);
Until(no_scripts[0]==FALSE) Delay(1);
secsp--;	//Subtract a second to make up for the 1-second delay above.
int timerx;
If(1)
	{
	secsp = 0;
	secsp = 15 * min;

	While(time_stop==FALSE)
		{
		SetFont("BIG_TEXT");
		If(GetCVAR("screenblocks")<12&&GetCVAR("cl_demo")==FALSE)
		{
			If(secsp % 60 >= 10)
			{
					HUDMessageBold (d:secsp / 60,s:":",d:secsp % 60;
				HUDMSG_FADEOUT, 0, CR_WHITE, 0.5,0.375, 0.2, 0.05, 0.05);   //Text
					HUDMessageBold (d:secsp / 60,s:":",d:secsp % 60;
				HUDMSG_FADEOUT, 0, CR_BLACK, 0.5065,0.3825, 0.2, 0.05, 0.05);//Shadow
			}
			Else
			{
					HUDMessageBold (d:secsp / 60,s:":0",d:secsp % 60;
				HUDMSG_FADEOUT, 0, CR_WHITE, 0.5,0.375, 0.2, 0.05, 0.05);
					HUDMessageBold (d:secsp / 60,s:":0",d:secsp % 60;
				HUDMSG_FADEOUT, 0, CR_BLACK, 0.5065,0.3825, 0.2, 0.05, 0.05);//Shadow
			}
		}
		Delay(5);
		If(no_scripts[0]==FALSE) timerx++;
		
		if(timerx % 7 == 0)
		{
			secsp--;
			timerx = 0;
			
			if(secsp==30&&clock_appeared==FALSE&&GetCVAR("cl_demo")==FALSE&&GameSkill()<2)
			{
				PrintBold(l:"SS_CLOCKAPPEARED1");
				If(SpawnForced("SpecialStageTimeBonus",GetActorX(0),GetActorY(0),GetActorZ(0)+128.5,950,0)) clock_appeared = TRUE;
				Delay(105);
				PrintBold(l:"SS_CLOCKAPPEARED2");
				
			}
		}
		
		if(secsp<=-1)
			{
			failed = TRUE;
			HUDMessageBold (l:"SS_TIMEUP";	//"OUT OF TIME"
				HUDMSG_FADEOUT, 0, CR_WHITE, 0.5,0.375, 1.0, 0.05, 0.05);
					HUDMessageBold (l:"SS_TIMEUP";
				HUDMSG_FADEOUT, 0, CR_BLACK, 0.5065,0.3825, 1.0, 0.05, 0.05);//Shadow
			time_stop = TRUE;
			}
		}
	}
}

script "GetXCoins" ENTER
{
	If(GetCVar("cl_demo")==TRUE) Terminate;
	If(ACS_NamedExecuteWithResult("CheckSpecialStage",0,0,0,0)==FALSE) Terminate;
	Delay(1);
	SetFont("3DLETTER");
	Until(level_ready==TRUE) Delay(1);	//Wait for the signal first.
	
	If(1)//StrParam(s:StrLeft(StrParam(n:PRINTNAME_LEVEL),7))=="SPECSTG" && StrParam(s:StrRight(StrParam(n:PRINTNAME_LEVEL),1))<7 && racing==0)
	{
		If(GameType()==GAME_NET_DEATHMATCH)
		{
			for (int md = -0.5; md < 0; md += 0.05)
			{
				HUDMessage (l:"SS_DEATHMATCH";
				HUDMSG_FADEOUT, 0, ss_colors[4], 0.5-md,0.5, 0.001, 0.001, 0.001);   //Player number
				if(md<=0&&md>-0.05)
					{
					HUDMessage (l:"SS_DEATHMATCH";
						HUDMSG_FADEOUT, 0, ss_colors[4], 0.5-md,0.5, 4.0, 1.0, 1.0);   //Player number
					
					}
				Delay(1);
			}
		}
		Else
		{
			Delay(35);
			
			Until(no_scripts[0]==FALSE) Delay(1);
			
			//Delay(20);
			
			HUDMessage (s:"GET ", d:coins_required[ss_number-1], s:" COINS!";
				HUDMSG_FADEinOUT, 0, ss_colors[4], 0.5,0.5, 4.0, 1.0, 1.0, 1.0);   //Player number
		}

	}

}

script "DetermineScore" (void)
{
time_stop = TRUE;
int temp_seconds = secsp;

temp_seconds = temp_seconds * 45;  //Mary

While(temp_seconds % 50 != 0)
    {
    temp_seconds++;
    Delay(1);
    }

If(temp_seconds % 500 >= 400) temp_seconds += 50;

scoresp = temp_seconds;

if(failed==TRUE) scoresp = 0;
}

script "GetSSScore" (void)
{
SetResultValue(scoresp);
}

script "ControlClock" OPEN
{
	int i;	//Sine and cosine, then the sine wave moving up and down.
	
	While(1)
	{
		i += 0.001;
		SetActorProperty(950, APROP_Alpha, 1.0);
		If(SetActorPosition(950, 2.5+(sin(i)*424), 2.5+(cos(i)*424), 256.25+sin(i*8)*96, FALSE)==FALSE) SetActorProperty(950, APROP_Alpha, 0.0);
		Delay(1);
	}
}

script 999 (int tid)
{
//PlaySound(tid,"mary/cgem_get", CHAN_5, 1.0, FALSE, ATTN_STATIC);	//TODO: When Xane has voices, change this for him.
ChangeCamera(1050 + PlayerNumber(),OFF,OFF);
}

script "SSWater" ENTER
{
int lump_name = StrParam(n:PRINTNAME_LEVEL);
if(lump_name == "SPECSTG1"||lump_name == "SPECSTG2"||lump_name == "SPECSTG3"||lump_name == "SPECSTG4"||lump_name == "SPECSTG5"||lump_name == "SPECSTG6"||lump_name == "SPECSTG7"||lump_name == "TUTORIAL")
{
	While(failed==false)
	{
	if(WaterLevel(0))
		{
		secsp--;
		PlaySound(1000+PlayerNumber(),"misc/waterwarn",CHAN_ITEM,0.75,0,ATTN_NONE);
		Delay(3);
		StopSound(1000+PlayerNumber(),CHAN_ITEM);
		}
	else Delay(3);
	}
}
else Terminate;
}

function int WaterLevel (int x)	//This should recreate the built-in waterlevel variables.
{
	if(GetActorZ(0)<=ACS_NamedExecuteWithResult("GetSpecial",1,0,0,0)-abs(GetActorProperty(0, APROP_Height))) x = 4;	//Fully submerged
	else if(GetActorZ(0)<=(ACS_NamedExecuteWithResult("GetSpecial",1,0,0,0)-abs(GetActorProperty(0, APROP_Height))/2)) x = 3;	//At least 1/2 in water.
	else if(GetActorZ(0)<=(ACS_NamedExecuteWithResult("GetSpecial",1,0,0,0)-abs(GetActorProperty(0, APROP_Height))/4)) x = 2;	//At least 1/4 in water.
	else if(GetActorZ(0)<=ACS_NamedExecuteWithResult("GetSpecial",1,0,0,0)) x = 1;	//At least this person's feet are in water.
	else x = 0;	//Not in water.

    return x;
}

function int abs (int x)
{
    if (x < 0)
        return -x;

    return x;
}